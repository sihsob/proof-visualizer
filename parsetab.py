
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '0EE057EEBE0A28D60BA8FA572AB38A28'
    
_lr_action_items = {'AND':([3,5,6,15,19,],[-11,-13,14,-10,-12,]),'RPAREN':([1,3,5,6,12,15,16,17,18,19,20,21,],[-6,-11,-13,-9,19,-10,-5,-4,-3,-12,-7,-8,]),'CONTRADICTION':([0,11,],[4,17,]),'OR':([3,5,6,15,19,],[-11,-13,13,-10,-12,]),'LPAREN':([0,2,8,10,11,13,14,],[2,2,2,2,2,2,2,]),'NOT':([0,2,8,10,11,13,14,],[8,8,8,8,8,8,8,]),'BICONDITIONAL':([1,3,5,6,15,19,20,21,],[10,-11,-13,-9,-10,-12,-7,-8,]),'IMPLICATION':([1,3,5,6,15,19,20,21,],[11,-11,-13,-9,-10,-12,-7,-8,]),'ID':([0,2,8,10,11,13,14,],[5,5,5,5,5,5,5,]),'$end':([1,3,4,5,6,7,9,15,16,17,18,19,20,21,],[-6,-11,-1,-13,-9,0,-2,-10,-5,-4,-3,-12,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'unary':([0,2,8,10,11,13,14,],[6,6,15,6,6,6,6,]),'binary':([0,2,10,11,13,14,],[1,1,1,1,20,21,]),'expression':([0,2,10,11,],[9,12,16,18,]),'statement':([0,],[7,]),'root':([0,2,8,10,11,13,14,],[3,3,3,3,3,3,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> CONTRADICTION','statement',1,'p_statement_contradiction','parse_tree.py',63),
  ('statement -> expression','statement',1,'p_statement_expression','parse_tree.py',67),
  ('expression -> binary IMPLICATION expression','expression',3,'p_expression_implication','parse_tree.py',72),
  ('expression -> binary IMPLICATION CONTRADICTION','expression',3,'p_expression_contrasubproof','parse_tree.py',75),
  ('expression -> binary BICONDITIONAL expression','expression',3,'p_expression_biconditional','parse_tree.py',80),
  ('expression -> binary','expression',1,'p_expression_pass','parse_tree.py',83),
  ('binary -> unary OR binary','binary',3,'p_binary_or','parse_tree.py',87),
  ('binary -> unary AND binary','binary',3,'p_binary_and','parse_tree.py',90),
  ('binary -> unary','binary',1,'p_binary_pass','parse_tree.py',93),
  ('unary -> NOT unary','unary',2,'p_unary_neg','parse_tree.py',97),
  ('unary -> root','unary',1,'p_unary_pass','parse_tree.py',100),
  ('root -> LPAREN expression RPAREN','root',3,'p_root_paren','parse_tree.py',104),
  ('root -> ID','root',1,'p_root_id','parse_tree.py',107),
]
